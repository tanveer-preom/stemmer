import : import
: : :
import : import
re : re
: : :
re : re
import : import
: : :
import : import
math : math
: : :
math : math
import : import
: : :
import : import
sys : sys
: : :
sys : sys
# : #
: : :
# : #
from : from
: : :
from : from
builtins : builtins
: : :
builtins : builtins
import : import
: : :
import : import
print : print
: : :
print : print
rootWords : rootWords
: : :
rootWords : rootWords
= : =
: : :
= : =
[] : []
: : :
[] : []
afterWordList : afterWordList
: : :
afterWordList : afterWordList
= : =
: : :
= : =
{} : {}
: : :
{} : {}
inputFile : inputFile
: : :
inputFile : inputFile
= : =
: : :
= : =
sys.argv[0] : sys.argv[0]
: : :
sys.argv[0] : sys.argv[0]
outputFile : outputFile
: : :
outputFile : outputFile
= : =
: : :
= : =
sys.argv[1] : sys.argv[1]
: : :
sys.argv[1] : sys.argv[1]
testdata : testdata
: : :
testdata : testdata
= : =
: : :
= : =
open(inputFile : open(inputFile
: : :
open(inputFile : open(inputFile
'r' : 'r'
: : :
'r' : 'r'
-1'utf-8') : -1'utf-8')
: : :
-1'utf-8') : -1'utf-8')
roots : roots
: : :
roots : roots
= : =
: : :
= : =
open('/home/tanveer/AI/4_2_Code/BanglaStemmer/Stemmer/Files/Output : open('/home/tanveer/AI/4_2_Code/BanglaStemmer/Stemmer/Files/Output
: : :
open('/home/tanveer/AI/4_2_Code/BanglaStemmer/Stemmer/Files/Output : open('/home/tanveer/AI/4_2_Code/BanglaStemmer/Stemmer/Files/Output
Files/RootsLD5.txt' : Files/RootsLD5.txt'
: : :
Files/RootsLD5.txt' : Files/RootsLD5.txt'
'r' : 'r'
: : :
'r' : 'r'
-1'utf-8') : -1'utf-8')
: : :
-1'utf-8') : -1'utf-8')
output : output
: : :
output : output
= : =
: : :
= : =
open(outputFile : open(outputFile
: : :
open(outputFile : open(outputFile
'w' : 'w'
: : :
'w' : 'w'
-1'utf-8') : -1'utf-8')
: : :
-1'utf-8') : -1'utf-8')
for : for
: : :
for : for
root : root
: : :
root : root
in : in
: : :
in : in
roots: : roots:
: : :
roots: : roots:
# : #
: : :
# : #
print("Line : print("Line
: : :
print("Line : print("Line
: : :
: : :
: : :
"line_count) : "line_count)
: : :
"line_count) : "line_count)
temp : temp
: : :
temp : temp
= : =
: : :
= : =
root.split(":") : root.split(":")
: : :
root.split(":") : root.split(":")
# : #
: : :
# : #
print(temp) : print(temp)
: : :
print(temp) : print(temp)
rootWords.append({'root' : rootWords.append({'root'
: : :
rootWords.append({'root' : rootWords.append({'root'
: : :
: : :
: : :
temp[0].strip() : temp[0].strip()
: : :
temp[0].strip() : temp[0].strip()
'inflections' : 'inflections'
: : :
'inflections' : 'inflections'
: : :
: : :
: : :
temp[1].split()}) : temp[1].split()})
: : :
temp[1].split()}) : temp[1].split()})
# : #
: : :
# : #
greats : greats
: : :
greats : greats
= : =
: : :
= : =
["অংকই" : ["অংকই"
: : :
["অংকই" : ["অংকই"
"অংক" : "অংক"
: : :
"অংক" : "অংক"
"অংকটাকে"] : "অংকটাকে"]
: : :
"অংকটাকে"] : "অংকটাকে"]
# : #
: : :
# : #
for : for
: : :
for : for
great : great
: : :
great : great
in : in
: : :
in : in
greats: : greats:
: : :
greats: : greats:
# : #
: : :
# : #
if : if
: : :
if : if
great : great
: : :
great : great
is : is
: : :
is : is
"অংক": : "অংক":
: : :
"অংক": : "অংক":
# : #
: : :
# : #
print(great) : print(great)
: : :
print(great) : print(great)
# : #
: : :
# : #
if : if
: : :
if : if
"অংক" : "অংক"
: : :
"অংক" : "অংক"
is : is
: : :
is : is
"অংক": : "অংক":
: : :
"অংক": : "অংক":
# : #
: : :
# : #
print("ok") : print("ok")
: : :
print("ok") : print("ok")
def : def
: : :
def : def
findRoot(word): : findRoot(word):
: : :
findRoot(word): : findRoot(word):
i : i
: : :
i : i
= : =
: : :
= : =
0 : 0
: : :
0 : 0
for : for
: : :
for : for
rootWord : rootWord
: : :
rootWord : rootWord
in : in
: : :
in : in
rootWords: : rootWords:
: : :
rootWords: : rootWords:
# : #
: : :
# : #
print(rootWord['root']) : print(rootWord['root'])
: : :
print(rootWord['root']) : print(rootWord['root'])
# : #
: : :
# : #
print(rootWord['inflections']) : print(rootWord['inflections'])
: : :
print(rootWord['inflections']) : print(rootWord['inflections'])
inflections : inflections
: : :
inflections : inflections
= : =
: : :
= : =
rootWord['inflections'] : rootWord['inflections']
: : :
rootWord['inflections'] : rootWord['inflections']
# : #
: : :
# : #
print(rootWord['root']) : print(rootWord['root'])
: : :
print(rootWord['root']) : print(rootWord['root'])
for : for
: : :
for : for
inflection : inflection
: : :
inflection : inflection
in : in
: : :
in : in
inflections: : inflections:
: : :
inflections: : inflections:
# : #
: : :
# : #
print() : print()
: : :
print() : print()
if : if
: : :
if : if
inflection.strip() : inflection.strip()
: : :
inflection.strip() : inflection.strip()
== : ==
: : :
== : ==
word: : word:
: : :
word: : word:
return : return
: : :
return : return
rootWord['root'] : rootWord['root']
: : :
rootWord['root'] : rootWord['root']
return : return
: : :
return : return
word : word
: : :
word : word
# : #
: : :
# : #
for : for
: : :
for : for
rootWord : rootWord
: : :
rootWord : rootWord
in : in
: : :
in : in
rootWords: : rootWords:
: : :
rootWords: : rootWords:
# : #
: : :
# : #
print(rootWord) : print(rootWord)
: : :
print(rootWord) : print(rootWord)
i : i
: : :
i : i
= : =
: : :
= : =
0 : 0
: : :
0 : 0
for : for
: : :
for : for
line : line
: : :
line : line
in : in
: : :
in : in
testdata: : testdata:
: : :
testdata: : testdata:
words : words
: : :
words : words
= : =
: : :
= : =
line.split() : line.split()
: : :
line.split() : line.split()
for : for
: : :
for : for
word : word
: : :
word : word
in : in
: : :
in : in
words: : words:
: : :
words: : words:
rootForm : rootForm
: : :
rootForm : rootForm
= : =
: : :
= : =
findRoot(word) : findRoot(word)
: : :
findRoot(word) : findRoot(word)
generateOutput : generateOutput
: : :
generateOutput : generateOutput
= : =
: : :
= : =
word+" : word+"
: : :
word+" : word+"
: : :
: : :
: : :
"+rootForm+"\n" : "+rootForm+"\n"
: : :
"+rootForm+"\n" : "+rootForm+"\n"
output.write(generateOutput) : output.write(generateOutput)
: : :
output.write(generateOutput) : output.write(generateOutput)
print(findRoot("অংকই")) : print(findRoot("অংকই"))
: : :
print(findRoot("অংকই")) : print(findRoot("অংকই"))
output.close() : output.close()
: : :
output.close() : output.close()
testdata.close() : testdata.close()
: : :
testdata.close() : testdata.close()
roots.close() : roots.close()
: : :
roots.close() : roots.close()
